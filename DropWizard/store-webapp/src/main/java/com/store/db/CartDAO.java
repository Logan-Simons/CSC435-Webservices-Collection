package com.store.db;

import java.util.List;

import org.jdbi.v3.sqlobject.SqlObject;
import org.jdbi.v3.sqlobject.config.RegisterBeanMapper;
import org.jdbi.v3.sqlobject.config.RegisterRowMapper;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.statement.GetGeneratedKeys;
import org.jdbi.v3.sqlobject.statement.SqlQuery;
import org.jdbi.v3.sqlobject.statement.SqlUpdate;

import com.store.core.Cart;
import com.store.core.CartProducts;

public interface CartDAO extends SqlObject {

    // couldn't get this to work?
    @SqlQuery("SELECT * FROM cart")
    @RegisterBeanMapper(Cart.class)
    List<Cart> getAllCarts();

    // creates a new row in the cart_products table, joining a cartID and a productID, as well as the total quantity
    @SqlQuery("SELECT cp.cartid, p.productid as p_productid, p.name, p.description, p.price, SUM(cp.quantity) AS total_quantity " +
              "FROM cart_products cp " +
              "JOIN product p ON cp.productid = p.productid " +
              "WHERE cp.cartid = :cartid " +
              "GROUP BY cp.cartid, p.productid, p.name, p.description, p.price")
    @RegisterRowMapper(CartProductMapper.class)
    List<CartProducts> getCartContents(@Bind("cartid") int cartid);
    
    // create a new cart row, ID is generated by the database
    @SqlUpdate("INSERT INTO cart DEFAULT VALUES")
    @GetGeneratedKeys
    int newCart();
    
    // calculate the sum of a products quantity and its price in a cart, ensures a numerical value is returned
    @SqlQuery("SELECT COALESCE(SUM(p.price * cp.quantity), 0) " +
              "FROM cart_products cp " +
              "JOIN product p ON cp.productid = p.productid " +
              "WHERE cp.cartid = :cartid")
    double getCartCost(@Bind("cartid") int cartid);
    
    // increase product quantity in the cart.
    @SqlUpdate("UPDATE cart_products SET quantity = quantity + :quantity " +
               "WHERE cartid = :cartid AND productid = :productid")
    int updateProductQuantity(@Bind("cartid") int cartid,
                              @Bind("productid") int productid,
                              @Bind("quantity") int quantity);
    
    // if a product doesn't exist in a cart, add a new row
    @SqlUpdate("INSERT INTO cart_products (cartid, productid, quantity) VALUES (:cartid, :productid, :quantity)")
    int insertProductIntoCart(@Bind("cartid") int cartid,
                              @Bind("productid") int productid,
                              @Bind("quantity") int quantity);
    
    // method to add a product to cart, using the insert and update methods above
    default void addProductToCart(int cartid, int productid, int quantity) {
        int rows = updateProductQuantity(cartid, productid, quantity);
        if (rows == 0) {
            insertProductIntoCart(cartid, productid, quantity);
        }
    }
    
    // fetch the current quantity of a product in a cart
    @SqlQuery("SELECT quantity FROM cart_products WHERE cartid = :cartid AND productid = :productid")
    Integer fetchQuantity(@Bind("cartid") int cartid, @Bind("productid") int productid);
    
    // update cart quantity, used in subtraction
    @SqlUpdate("UPDATE cart_products SET quantity = :newQuantity WHERE cartid = :cartid AND productid = :productid")
    int updateQuantity(@Bind("cartid") int cartid,
                       @Bind("productid") int productid,
                       @Bind("newQuantity") int newQuantity);
    
    // delete a carts quantity, if the subtraction returns the cart product is zero
    @SqlUpdate("DELETE FROM cart_products WHERE cartid = :cartid AND productid = :productid")
    int deleteProductFromCart(@Bind("cartid") int cartid, @Bind("productid") int productid);
    
    default void subtractProductFromCart(int cartid, int productid) {
        Integer currentQty = fetchQuantity(cartid, productid);
        if (currentQty != null && currentQty > 0) {
            int newQty = currentQty - 1;
            if (newQty > 0) {
                updateQuantity(cartid, productid, newQty);
            } else {
                deleteProductFromCart(cartid, productid);
            }
        }
    }
    
    // clear cart
    @SqlUpdate("DELETE FROM cart_products WHERE cartid = :cartid")
    void clearCart(@Bind("cartid") int cartid);
}
