package com.store.resources;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.store.core.Cart;
import com.store.core.CartProducts;
import com.store.db.CartDAO;

@Path("/store/cart")
@Produces(MediaType.APPLICATION_JSON)
// Adjust @Consumes if needed (for JSON input) 
@Consumes(MediaType.APPLICATION_JSON)
public class CartResource {

    private final CartDAO cartDAO;

    public CartResource(CartDAO cartDAO) {
        this.cartDAO = cartDAO;
    }

    // for some reason I couldn't get this to work, 500 error... 
    @GET
    @Path("/all")
    public Response getAllCarts() {

        List<Cart> allCarts = cartDAO.getAllCarts();
        return Response.ok(allCarts).build();

    }

    // retrieve a carts content
    @GET
    @Path("/")
    public Response getCartContents(@QueryParam("id") int id) {
        List<CartProducts> cartProducts = cartDAO.getCartContents(id);
        if (cartProducts.isEmpty()) {
            return Response.status(Response.Status.NO_CONTENT).build();
        }
        return Response.ok(cartProducts).build();
    }

    // create a new cart (ID is auto generated by database)
    @POST
    @Path("/create")
    public Response createCart() {
        int cartID = cartDAO.newCart();
        Cart cart = new Cart();
        cart.setId(cartID);
        return Response.status(Response.Status.CREATED).entity(cart).build();
    }

    // get cart total cost, math is handled in the database
    @GET
    @Path("/cost")
    public Response cartCost(@QueryParam("cartid") int cartID) {
        double cost = cartDAO.getCartCost(cartID);
        return Response.ok(cost).build();
    }

    // add a product to a cart
    @POST
    @Path("/add")
    public Response addProductToCart(@QueryParam("cartid") int cartid,
                                     @QueryParam("productid") int productid,
                                     @QueryParam("quantity") int quantity) {
        cartDAO.addProductToCart(cartid, productid, quantity);
        List<CartProducts> cartProducts = cartDAO.getCartContents(cartid);
        return Response.ok(cartProducts).build();
    }

    // subtract a product from a cart
    @PUT
    @Path("/sub")
    public Response subProductToCart(@QueryParam("cartid") int cartid,
                                     @QueryParam("productid") int productid) {
        cartDAO.subtractProductFromCart(cartid, productid);
        List<CartProducts> cartProducts = cartDAO.getCartContents(cartid);
        return Response.ok(cartProducts).build();
    }

    // clear a cart
    @DELETE
    @Path("/delete")
    public Response clearCart(@QueryParam("cartid") int cartid) {
        cartDAO.clearCart(cartid);
        return Response.ok("Cleared cart").build();
    }
}
